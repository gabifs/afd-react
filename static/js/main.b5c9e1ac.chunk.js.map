{"version":3,"sources":["core/Afd/index.ts","components/Editor/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Afd","grammar","grammarType","name","states","alphbet","productions","initialState","currentState","terminals","history","this","JSON","parse","_validatesProductions","word","head","tail","newState","push","length","_moveTo","run","includes","state","Object","keys","find","prodState","Error","prodStates","Set","values","reduce","combined","prog","prodSymbols","prodSymbol","Editor","props","grammarState","setGrammar","useState","result","wordList","setWordList","InputMessage","className","id","type","onChange","event","preventDefault","file","target","files","reader","FileReader","onloadend","readAsText","value","onClick","window","__AFD__","map","createAfd","cols","rows","spellCheck","wrap","item","index","key","filter","e","newWord","placeholder","currenteState","simbol","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5c9e1ac.chunk.js","sourcesContent":["export default class Afd {\n\n  grammar: string\n  grammarType: string\n  name: string\n  states: Array<string>\n  alphbet: Array<string>\n  productions: any\n  initialState: string\n  currentState: string\n  terminals: Array<string>\n  history: Array<[string, string, string]>\n\n  constructor(grammar:string, grammarType:string = \"json\") {\n    this.grammar = grammar\n    this.grammarType = grammarType\n\n    const {\n      name,\n      states,\n      alphbet,\n      productions,\n      initialState,\n      terminals\n    } = JSON.parse(grammar)\n    // !VALIDAR FORMATO DE ENTRADA\n    // !AFD MINIMIZADO\n\n    this.name = name\n    this.states = states\n    this.alphbet = alphbet\n\n    this.productions = this._validatesProductions(productions)\n    this.initialState = initialState\n    this.currentState = initialState\n    this.terminals = terminals\n    this.history = []\n  }\n\n  run(word: string|Array<string> ):boolean{\n\n    const [head, ...tail] = word;\n\n    const newState = this.productions[this.currentState][head]\n\n    this.history.push([this.currentState, head, newState])\n\n    if(newState){\n      /* novo estado existe */\n\n      if(tail.length !== 0){\n        /* continua a leitura da palavra */\n\n        this._moveTo( newState )\n        return this.run(tail)\n      }else {\n        /* palavra acabou, finaliza execução */\n\n        if(this.terminals.includes(newState)){\n          /* palavra pertence ao alfabeto */\n\n          this._moveTo( this.initialState )\n          return true\n        } else {\n          /* palavra não pertence ao alfabeto */\n\n          this._moveTo( this.initialState )\n          return false\n        }\n      }\n    }else {\n      /* novo estado não existe:\n         - simbolo lido não pertence ao alfabeto\n         - simbolo lido não está ligado ou estado atual\n         - estado atual não pertence ao conjunto de estados */\n\n      this._moveTo( this.initialState )\n      return false\n    }\n  }\n\n  protected _moveTo(state:string){\n    /* move execução para um novo estado */\n\n    this.currentState = state\n    return this.currentState\n  }\n\n  protected _validatesProductions(productions:object):object {\n\n    if(Object.keys(productions).find(prodState => !this.states.includes(prodState))) {\n      throw new Error(\"production state undefined\")\n    }\n\n    const prodStates:Set<string> = new Set(Object\n                                            .values(productions)\n                                            .reduce((combined, prog) => [...combined, ...Object.values(prog)] ,[]))\n\n    if([...prodStates].find(prodState => !this.states.includes(prodState))){\n      throw new Error(\"production state undefined\")\n    }\n\n    const prodSymbols:Set<string> = new Set(Object\n                                            .values(productions)\n                                            .reduce((combined, prog) => [...combined, ...Object.keys(prog)] ,[]))\n\n    if([...prodSymbols].find(prodSymbol => !this.alphbet.includes(prodSymbol))){\n      throw new Error(\"production symbol undefined\");\n    }\n\n    return productions\n  }\n}\n\n// const data = `{\n//   \"name\": \"my-grammar-1\",\n//   \"states\": [\n//     \"q0\",\n//     \"q1\"\n//   ],\n//   \"alphbet\": [\n//     \"a\",\n//     \"b\"\n//   ],\n//   \"productions\": {\n//     \"q0\": {\n//       \"a\": \"q1\",\n//       \"b\": \"q1\"\n//     },\n//     \"q1\": {\n//       \"a\": \"q0\",\n//       \"b\": \"q3\"\n//     }\n//   },\n//   \"initialState\": \"q0\",\n//   \"terminals\": [\"q0\"]\n// }\n// `\n// try{\n//   const automata = new Afd(data)\n//   console.log('resultado:', automata.run('ababa'))\n//   console.log('history', automata.history)\n// }catch(err){\n//   console.log(err)\n// }\n","import React from 'react'\nimport { useState } from 'react'\nimport './style.css'\n\nimport Afd from '../../core/Afd'\n\ndeclare global {\n  var __AFD__: Afd;\n}\n\ninterface IEditorProps{\n  grammarState: [string, Function]\n}\n\ninterface IInputMessage{\n  result: string\n}\n\nexport default function Editor(props:IEditorProps) {\n  const [grammar, setGrammar] = props.grammarState\n  const [wordList, setWordList] = useState([\n    {\n      word: '',\n      result: 'disabled',\n      history: []\n    }\n  ])\n\n  function handleNewFile(event:React.ChangeEvent<HTMLInputElement>) {\n    event.preventDefault()\n\n    const file = event.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n\n      reader.onloadend= () => {\n        setGrammar(reader.result as string)\n      }\n\n      reader.readAsText(file);\n    }\n  }\n\n  function handleGrammarChange (event:React.ChangeEvent<HTMLTextAreaElement>) {\n    event.preventDefault()\n\n    setGrammar(event.target.value)\n  }\n\n  function executeFor(key:number, newWord:string):void{\n    setWordList(wordList.map((item, index)=>{\n      if(window.__AFD__){\n        if(index === key){\n          if(newWord){\n            window.__AFD__.history = []\n            if(window.__AFD__.run(newWord)){\n              return {\n                word: newWord,\n                result: 'success',\n                history: window.__AFD__.history\n              }\n            }else{\n              return {\n                word: newWord,\n                result: 'error',\n                history: window.__AFD__.history\n              }\n            }\n          }else{\n            return {\n              word: newWord,\n              result: 'warning',\n              history: []\n            }\n          }\n        }else{\n          return item\n        }\n      }else{\n        return {\n          word: '',\n          result: 'disabled',\n          history: []\n        }\n      }\n    }))\n  }\n\n  function createAfd(grammar:string){\n    window.__AFD__ = new Afd(grammar)\n    setWordList(wordList.map(() => ({\n      word: '',\n      result: 'warning',\n      history: []\n    })))\n  }\n\n  function addInput(){\n    setWordList([\n      ...wordList,\n      {\n        word: '',\n        result: 'warning',\n        history: []\n      }\n    ])\n  }\n\n  function closeInput(key:number){\n    setWordList(wordList.filter((word, index) => key !== index))\n  }\n\n  const InputMessage = (props:IInputMessage) => {\n    switch(props.result){\n      case(\"warning\"):\n        return (<label className=\"nes-text is-warning\">Nenhuma palavra</label>)\n      case(\"error\"):\n        return (<label className=\"nes-text is-error\">Palavra rejeitada</label>)\n      case(\"success\"):\n        return (<label className=\"nes-text is-success\">Palavra aceita</label>)\n      case(\"disabled\"):\n        return (<label className=\"nes-text is-disabled\">Crie um AFD</label>)\n    }\n  }\n\n  return (\n    <section id=\"editor\">\n      <div className=\"editor__group1 nes-container is-rounded\">\n        <nav className=\"editor__controlsBar\">\n          <div className=\"editor__editorControl\">\n            <label className=\"nes-btn is-primary\">\n              <span>\n                Selecione um arquivo\n              </span>\n              <input\n                type=\"file\"\n                className=\"editor__fileInput is-primary\"\n                onChange={handleNewFile}\n              />\n            </label>\n          </div>\n          <div className=\"editor__editorControl\">\n            <input\n              type=\"button\"\n              value=\"Executar\"\n              className=\"nes-btn is-success\"\n              onClick={() => createAfd(grammar)}\n            />\n          </div>\n        </nav>\n        <div className=\"editor__textEditor nes-field\">\n          <textarea\n            name=\"editor\"\n            cols={90}\n            rows={30}\n            value={grammar}\n            onChange={handleGrammarChange}\n            spellCheck=\"false\"\n            className=\"nes-textarea\"\n            wrap=\"soft\"\n          />\n        </div>\n      </div>\n      <div className=\"editor__group2 nes-container is-rounded\">\n        <input\n          type=\"button\"\n          value=\"Add input\"\n          className={`nes-btn is-${window.__AFD__ ? \"warning\" : \"disabled\"}`}\n          onClick={() => addInput()}\n        />\n        {\n          wordList.map((item, index)=>(\n            <div key={index} className=\"editor__wordsInputs nes-container is-rounded\">\n              <div className=\"editor__inputHeader\">\n                <InputMessage result={item.result} />\n                <button\n                  className=\"nes-btn is-error\"\n                  onClick={() => closeInput(index)}\n                >X</button>\n              </div>\n              <input\n                type=\"text\"\n                value={item.word}\n                onChange={(e) => executeFor(index, e.target.value)}\n                className={`nes-input is-${item.result}`}\n                placeholder={window.__AFD__?\"Insira uma palavra\":\"Crie um Automato\"}\n              />\n              <details>\n                <summary>Histórico</summary>\n                <div className=\"nes-container is-rounded is-dark\">\n                  {\n                    item.history.map(([currenteState, simbol, newState]) => (\n                      <p>\n                        <strong className=\"nes-text is-success\">{currenteState} </strong>\n                        {newState ? (\n                          <>\n                            <span className=\"nes-text is-primary\">{` (${simbol}) `}</span>\n                            <strong className=\"nes-text is-success\"> {newState}</strong>\n                          </>\n                        ) : (\n                          <>\n                            <span className=\"nes-text is-error\">{` (${simbol}) `}</span>\n                          </>\n                        )\n                        }\n                      </p>\n                    ))\n                  }\n                </div>\n              </details>\n            </div>\n            )\n          )\n        }\n\n      </div>\n    </section>\n  )\n}\n","import React from 'react';\nimport {useState} from 'react';\nimport Editor from './components/Editor'\nimport './App.css';\n\nfunction App() {\n  const grammarState = useState(``)\n\n  return (\n    <main className=\"App\">\n      <Editor\n        grammarState={grammarState}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}