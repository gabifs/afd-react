{"version":3,"sources":["core/classes/DisjointSet.ts","core/Afd/index.ts","components/Editor/index.tsx","core/utils/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DisjointSet","states","_disjoint_set","this","Set","state","push","item","s","indexOf","line","column","i","_get_index","j","filter","_item","index","Afd","grammar","grammarType","name","alphbet","productions","initialState","currentState","terminals","history","JSON","parse","_validatesProductions","_validatesInitialState","_validatesTerminals","word","includes","head","tail","newState","undefined","length","_moveTo","run","Object","keys","find","prodState","Error","prodStates","values","reduce","combined","prog","prodSymbols","prodSymbol","map","graph","Map","key","set","value","get","stack","reachable_states","pop","has","add","fromEntries","entries","entrie","console","log","slice","_remove_unreachable_states","table","sortedStates","sort","forEach","stateLine","stateColumn","toString","flag","parseInt","symbol","t1","t2","marked","dset","line_column","mark","split","union","finded","old_terminal","_updateProductions","print","newProductions","old_state","production","_findUnion","Editor","props","grammarState","setGrammar","useState","result","wordList","setWordList","listFilter","setListFilter","createAfd","window","__AFD__","obj","lines","afd_name","definition","trim","rest1","rest2","prog_name","initial","rest3","state_symbol","stringify","err","parseJSON","swal","message","InputMessage","className","HistoryMessage","lastRound","lastState","id","type","onChange","event","preventDefault","file","target","files","reader","FileReader","onloadend","readAsText","onClick","cols","rows","spellCheck","wrap","_word","e","newWord","placeholder","style","marginTop","textAlign","currenteState","simbol","text","tuple","match","parseWordTupleList","wordTuple","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b41c87c.chunk.js","sourcesContent":["export default class DisjointSet {\n\n  _disjoint_set:Array<Array<string>>\n\n  constructor(states:Array<string>){\n    this._disjoint_set = []\n\n    if(states){\n      for(let state of new Set(states)){\n        this._disjoint_set.push([state])\n      }\n    }\n  }\n\n  protected _get_index(item:string){\n    for( let s of this._disjoint_set){\n      for( let element of s){\n        if (element === item){\n          return this._disjoint_set.indexOf(s)\n        }\n      }\n    }\n    return null\n  }\n\n  union(line:string, column:string){\n    let i = this._get_index(line)\n    let j = this._get_index(column)\n\n    if (i !== j){\n      this._disjoint_set[i] = [\n        ...this._disjoint_set[i], ...this._disjoint_set[j]\n      ]\n\n      this._disjoint_set = this._disjoint_set.filter((_item, index) => index !== j)\n    }\n  }\n\n  get(){\n    return this._disjoint_set\n  }\n}\n","import DisjointSet from '../classes/DisjointSet'\n\nexport default class Afd {\n\n  grammar: string\n  grammarType: string\n  name: string\n  states: Array<string>\n  alphbet: Array<string>\n  productions: any\n  initialState: string\n  currentState: string\n  terminals: Array<string>\n  history: Array<[string, string, string]>\n\n  constructor(grammar:string, grammarType:string = \"json\") {\n    this.grammar = grammar\n    this.grammarType = grammarType\n\n    const {\n      name,\n      states,\n      alphbet,\n      productions,\n      initialState,\n      terminals\n    } = JSON.parse(grammar)\n\n    // !AFD MINIMIZADO\n\n    this.name = name\n    this.states = states\n    this.alphbet = ['',...alphbet]\n\n    this.productions = this._validatesProductions(productions)\n    this.initialState = this._validatesInitialState(initialState)\n    this.terminals = this._validatesTerminals(terminals)\n    this.history = []\n\n    // this._minimization()\n    this.currentState = initialState\n  }\n\n  run(word: string|Array<string> ):boolean{\n    // Verifica palavra vazia\n    if(!word){\n      this.history=[[this.initialState, '', this.initialState]]\n      return this.terminals.includes(this.initialState)\n    }\n\n    const [head, ...tail] = word;\n\n    const newState = this.productions[this.currentState]? this.productions[this.currentState][head] : undefined\n\n    this.history.push([this.currentState, head, newState])\n\n    if(newState){\n      /* novo estado existe */\n\n      if(tail.length !== 0){\n        /* continua a leitura da palavra */\n\n        this._moveTo( newState )\n        return this.run(tail)\n      }else {\n        /* palavra acabou, finaliza execução */\n\n        if(this.terminals.includes(newState)){\n          /* palavra pertence ao alfabeto */\n\n          this._moveTo( this.initialState )\n          return true\n        } else {\n          /* palavra não pertence ao alfabeto */\n\n          this._moveTo( this.initialState )\n          return false\n        }\n      }\n    }else {\n      /* novo estado não existe:\n         - simbolo lido não pertence ao alfabeto\n         - simbolo lido não está ligado ao estado atual\n         - estado atual não pertence ao conjunto de estados */\n      this._moveTo( this.initialState )\n      return false\n    }\n  }\n\n  protected _moveTo(state:string){\n    /* move execução para um novo estado */\n\n    this.currentState = state\n    return this.currentState\n  }\n\n  protected _validatesProductions(productions:object):object {\n\n    if(Object.keys(productions).find(prodState => !this.states.includes(prodState))) {\n      throw new Error(\"Estado da produção indefinido\")\n    }\n\n    const prodStates:Set<string> = new Set(Object\n                                            .values(productions)\n                                            .reduce((combined, prog) => [...combined, ...Object.values(prog)] ,[]))\n\n    if([...prodStates].find(prodState => !this.states.includes(prodState))){\n      throw new Error(\"Estado da produção indefinido\")\n    }\n\n    const prodSymbols:Set<string> = new Set(Object\n                                            .values(productions)\n                                            .reduce((combined, prog) => [...combined, ...Object.keys(prog)] ,[]))\n\n    if([...prodSymbols].find(prodSymbol => !this.alphbet.includes(prodSymbol))){\n      throw new Error(\"Simbolo da produção indefinido\");\n    }\n\n    return productions\n  }\n\n  protected _validatesInitialState(initialState:string){\n    if(this.states.includes(initialState)){\n      return initialState\n    }else{\n      throw new Error(\"Estado inicial não pertence ao conjunto de estados!\")\n    }\n  }\n\n  protected _validatesTerminals(terminals:Array<string>){\n    return terminals.map(state => {\n      if(this.states.includes(state)){\n        return state\n      }else {\n        throw new Error(\"Estado indefinido entre os estados terminais\")\n      }\n    })\n  }\n\n  protected _remove_unreachable_states(){\n    const graph = new Map()\n    for(const key of Object.keys(this.productions)){\n        graph.set(key, [])\n        for(const value of Object.values(this.productions[key])){\n          graph.get(key).push(value)\n        }\n    }\n    let stack = [this.initialState]\n\n    const reachable_states = new Set()\n    while(stack.length) {\n      let state = stack.pop()\n\n      if (!reachable_states.has(state) && graph.get(state)){\n        stack = [...stack, ...graph.get(state)]\n      }\n\n      reachable_states.add(state)\n    }\n    this.states = this.states.filter(state => reachable_states.has(state))\n    this.terminals = this.terminals.filter(state => reachable_states.has(state))\n    this.productions = Object.fromEntries(\n      Object.entries(this.productions)\n        .filter(entrie => reachable_states.has(entrie[0]))\n    )\n\n  }\n\n  print(){\n    console.log(\n      {\n        name: this.name,\n        states: this.states,\n        alphbet: this.alphbet,\n        productions: this.productions,\n        initialState: this.initialState,\n        terminals: this.terminals,\n      }\n    )\n  }\n\n  protected _minimization(){\n    this.alphbet = this.alphbet.slice(1)\n\n\n    this._remove_unreachable_states()\n\n\n    const table = new Map()\n\n    const sortedStates = this.states.sort()\n\n    sortedStates.forEach((stateLine, index)=>{\n      const sortedTail = sortedStates.slice(index+1)\n      sortedTail.forEach(stateColumn => {\n\n        table.set([stateLine, stateColumn].toString(), (\n          this.terminals.includes(stateLine) !==\n          this.terminals.includes(stateColumn)\n        ))\n      })\n    })\n\n\n\n    let flag = true\n\n    while(flag){\n      flag = false\n\n      for(let [index, stateLine] of Object.entries(sortedStates)){\n\n        for(let stateColumn of sortedStates.slice(parseInt(index)+1)){\n\n          if (table.get([stateLine,stateColumn].toString())){\n            continue\n          }\n\n          for(let symbol of this.alphbet){\n            const t1 = this.productions[stateLine][symbol] || null\n            const t2 = this.productions[stateColumn][symbol] || null\n\n            if (t1 !== t2 && t1 && t2){\n              let key = [t1, t2].sort()\n              let marked = table.get(key.toString())\n              flag = flag || marked\n              table.set([stateLine, stateColumn].toString(), marked)\n\n              if(marked) break\n            }\n          }\n        }\n      }\n\n    }\n\n    const dset = new DisjointSet(this.states)\n\n    for (let [line_column, mark] of table.entries()){\n      let [line, column] = line_column.split(',')\n      if(!mark){\n        dset.union(line ,column)\n      }\n    }\n\n    this.states = dset.get().map(states => (\n      states.reduce((name, state)=> name+state, '')\n    ))\n\n    this.initialState = this.states.filter(state => state.includes(this.initialState))[0]\n\n    this.terminals = this.states.filter(state => {\n      let finded = false\n      for(let old_terminal of this.terminals){\n        finded = finded || state.includes(old_terminal)\n      }\n      return finded\n    })\n\n    this._updateProductions()\n\n    this.alphbet = [\"\", ...this.alphbet]\n    this.print()\n  }\n\n  protected _updateProductions(){\n    let newProductions:any = {}\n\n    for(let [old_state, production] of Object.entries(this.productions)){\n      if (!newProductions[this._findUnion(old_state)]){\n        newProductions[this._findUnion(old_state)] = production\n      }else{\n        newProductions[this._findUnion(old_state)] = {\n          ...newProductions[this._findUnion(old_state)],\n          ...this.productions[this._findUnion(old_state)]\n        }\n      }\n    }\n\n    for(let state of this.states){\n      if(newProductions[state])\n      for(let s of Object.keys(newProductions[state])){\n        newProductions[state][s] = this._findUnion(newProductions[state][s])\n      }\n    }\n\n    this.productions = newProductions\n  }\n\n  protected _findUnion(old_state:string){\n    return this.states.filter(state => state.includes(old_state))[0]\n  }\n}\n","import React from 'react'\nimport { useState } from 'react'\nimport swal from 'sweetalert';\nimport './style.css'\n\nimport Afd from '../../core/Afd'\nimport { parseJSON, parseWordTupleList } from '../../core/utils'\n\ndeclare global {\n  var __AFD__: Afd;\n}\n\ninterface IEditorProps{\n  grammarState: [string, Function]\n}\n\nexport default function Editor(props:IEditorProps) {\n  const [grammar, setGrammar] = props.grammarState\n  const [wordList, setWordList] = useState([\n    {\n      word: '',\n      result: 'disabled',\n      history: []\n    }\n  ])\n  const [listFilter, setListFilter] = useState([['','']])\n\n  function handleNewFile(event:React.ChangeEvent<HTMLInputElement>) {\n    event.preventDefault()\n\n    const file = event.target.files[0];\n\n    if (file) {\n      try {\n        const reader = new FileReader();\n\n        reader.onloadend= () => {\n          setGrammar(reader.result as string)\n        }\n\n        reader.readAsText(file);\n      } catch (err) {\n        swal('Erro', err.message, \"error\")\n      }\n\n    }else {\n      swal(\"Nenhum arquivo\")\n    }\n  }\n\n  function handleGrammarChange (event:React.ChangeEvent<HTMLTextAreaElement>) {\n    event.preventDefault()\n\n    setGrammar(event.target.value)\n  }\n\n  function executeFor(key:number, newWord:string):void{\n    setWordList(wordList.map((item, index)=>{\n      if(window.__AFD__){\n        if(index === key){\n          window.__AFD__.history = []\n          if(window.__AFD__.run(newWord)){\n            return {\n              word: newWord,\n              result: 'success',\n              history: window.__AFD__.history\n            }\n          }else{\n            return {\n              word: newWord,\n              result: 'error',\n              history: window.__AFD__.history\n            }\n          }\n        }else{\n          return item\n        }\n\n      }else{\n        return {\n          word: '',\n          result: 'disabled',\n          history: []\n        }\n      }\n    }))\n  }\n\n  function createAfd(grammar:string){\n    try{\n      window.__AFD__ = new Afd(parseJSON(grammar))\n      setWordList(wordList.map(() => ({\n        word: '',\n        result: window.__AFD__.run('') ? 'success' : 'error',\n        history: window.__AFD__.history\n      })))\n    }catch(err){\n      swal(\"Erro na criação\", err.message, \"error\")\n    }\n  }\n\n  function addInput(){\n    setWordList([\n      ...wordList,\n      {\n        word: '',\n        result: window.__AFD__.run('') ? 'success' : 'error',\n        history: window.__AFD__.history\n      }\n    ])\n  }\n\n  function closeInput(key:number){\n    setWordList(wordList.filter((_word, index) => key !== index))\n  }\n\n  interface IInputMessageProps{\n    result: string\n  }\n\n  const InputMessage = (props:IInputMessageProps) => {\n    switch(props.result){\n      case(\"error\"):\n        return (\n          <span  className=\"nes-badge\">\n            <span className=\"is-error\">REJEITA</span>\n          </span>\n        )\n      case(\"success\"):\n        return (\n          <span className=\"nes-badge\">\n            <span className=\"is-success\">ACEITA</span>\n          </span>\n        )\n      case(\"disabled\"):\n        return (\n          <span className=\"nes-badge\">\n            <span className=\"is-dark\">_</span>\n          </span>\n        )\n    }\n  }\n\n  interface IHistoryMessageProps {\n    lastRound: [string, string, string|undefined]\n  }\n\n  const HistoryMessage = (props:IHistoryMessageProps) => {\n    const symbol = props.lastRound[1]\n    const lastState = props.lastRound[2]\n\n    if(window.__AFD__.alphbet.includes(symbol)){\n      if(lastState){\n        if(window.__AFD__.terminals.includes(lastState)){\n          return (<p className=\"nes-text is-success\">Palavra aceita</p>)\n        }else{\n          return (<p className=\"nes-text is-error\">Estado final não é terminal</p>)\n        }\n      }else{\n        return (<p className=\"nes-text is-error\">Produção indefinida</p>)\n      }\n    }else{\n      return (<p className=\"nes-text is-error\">Simbolo não pertence ao alfabeto</p>)\n    }\n\n  }\n\n  function handleWordTupleList(event:React.ChangeEvent<HTMLInputElement>) {\n    event.preventDefault()\n\n    const file = event.target.files[0];\n\n    if (file) {\n      try {\n        const reader = new FileReader();\n\n        reader.onloadend= () => {\n          setListFilter(parseWordTupleList(reader.result as string) || [['','']])\n        }\n\n        reader.readAsText(file);\n      } catch (err) {\n        swal('Erro', err.message, \"error\")\n      }\n\n    }else {\n      swal(\"Nenhum arquivo\")\n    }\n  }\n\n  return (\n    <section id=\"editor\">\n      <div className=\"editor__group1 nes-container is-rounded\">\n        <nav className=\"editor__controlsBar\">\n          <div className=\"editor__editorControl\">\n            <label className=\"nes-btn is-primary\">\n              <span>\n                Selecione um arquivo\n              </span>\n              <input\n                type=\"file\"\n                className=\"editor__fileInput is-primary\"\n                onChange={handleNewFile}\n              />\n            </label>\n          </div>\n          <div className=\"editor__editorControl\">\n            <input\n              type=\"button\"\n              value=\"Criar automato\"\n              className=\"nes-btn is-success\"\n              onClick={() => createAfd(grammar)}\n            />\n          </div>\n        </nav>\n        <div className=\"editor__textEditor nes-field\">\n          <textarea\n            name=\"editor\"\n            cols={90}\n            rows={20}\n            value={grammar}\n            onChange={handleGrammarChange}\n            spellCheck=\"false\"\n            className=\"nes-textarea\"\n            wrap=\"soft\"\n          />\n        </div>\n      </div>\n      <div className=\"editor__group2 nes-container is-rounded\">\n        <input\n          type=\"button\"\n          value=\"Add input\"\n          className={`nes-btn is-${window.__AFD__ ? \"warning\" : \"disabled\"}`}\n          onClick={() => window.__AFD__? addInput() : false}\n        />\n        {\n          wordList.map((item, index)=>(\n            <div key={index} className=\"editor__wordsInputs nes-container is-rounded\">\n              <div className=\"editor__inputHeader\">\n                <InputMessage result={item.result} />\n                <button\n                  className=\"nes-btn is-error\"\n                  onClick={() => closeInput(index)}\n                >X</button>\n              </div>\n              <input\n                type=\"text\"\n                value={item.word}\n                onChange={(e) => executeFor(index, e.target.value)}\n                className={`nes-input is-${item.result}`}\n                placeholder={window.__AFD__?\"Palavra vazia\":\"Crie um Automato\"}\n              />\n              <details style={{marginTop:'1rem'}}>\n                <summary>Histórico</summary>\n                <div\n                  className=\"nes-container is-rounded is-dark\"\n                  style={{textAlign:\"center\"}}>\n                  {\n                    item.history.map(([currenteState, simbol, newState], index) => (\n                      <p key={index}>\n                        <span className=\"nes-text is-warning\">{`${index+1}) `}</span>\n                        <strong className=\"nes-text is-success\">{currenteState}</strong>\n                        {newState ? (\n                          <>\n                            |<span className=\"nes-text is-primary\">{`(${simbol})`}</span>\n                            |<strong className=\"nes-text is-success\">{newState}</strong>\n                          </>\n                        ) : (\n                          <>\n                            |<span className=\"nes-text is-error\">{`(${simbol})`}</span>\n                          </>\n                        )\n                        }\n                      </p>\n                    ))\n                  }\n                  {\n                    item.history.length ? <HistoryMessage lastRound={item.history[item.history.length -1]}/> : ''\n                  }\n                  </div>\n              </details>\n            </div>\n            )\n          )\n        }\n\n      </div>\n      <div className=\"editor__group3 nes-container is-rounded\">\n        <div className=\"editor__editorControl\">\n          <label className={`nes-btn is-${window.__AFD__ ? \"primary\" : \"disabled\"}`}>\n            <span>\n              Lista de duplas de palavras\n            </span>\n            <input\n              type=\"file\"\n              className={`editor__fileInput`}\n              onChange={ window.__AFD__ ? handleWordTupleList : ()=>false }\n            />\n          </label>\n        </div>\n        <div className=\"editor__wordTupleView\">\n          <div className=\"editor__listView lists nes-container is-rounded is-dark\">\n            <h3>Input</h3>\n            <ul className=\"is-circle\">\n              {\n                listFilter.map((wordTuple, index) => {\n                  if (window.__AFD__){\n                    if(window.__AFD__.run(wordTuple[0]) && window.__AFD__.run(wordTuple[1])) {\n                      return (\n                        <li className=\"nes-text is-primary\"\n                          key={index}\n                        >{`(${wordTuple[0]}, ${wordTuple[1]})`}</li>\n                      )\n                    }else{\n                      return (\n                        <li className=\"nes-text is-error\"\n                          key={index}\n                        >{`(${wordTuple[0]}, ${wordTuple[1]})`}</li>\n                      )\n                    }\n                  }else{\n                    return false\n                  }\n\n\n                })\n              }\n            </ul>\n          </div>\n\n          <div className=\"editor__listView lists nes-container is-rounded is-dark\">\n          <h3>Output</h3>\n            <ul className=\"is-circle\">\n              {\n                listFilter\n                  .filter(wordTuple => (\n                    window.__AFD__ ?\n                    window.__AFD__.run(wordTuple[0]) &&\n                    window.__AFD__.run(wordTuple[0]) :\n                    false\n                  ))\n                  .map((wordTuple, index) => {\n                    return (\n                      <li className=\"nes-text is-success\"\n                        key={index}\n                      >{`(${wordTuple[0]}, ${wordTuple[1]})`}</li>\n                    )\n                  })\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n","import swal from 'sweetalert'\n\nexport function parseJSON(grammar:string){\n  interface IObj{\n    name:string,\n    states:Array<string>,\n    alphbet:Array<string>,\n    productions:any,\n    initialState:string,\n    terminals:Array<string>\n  }\n\n  const obj:IObj = {\n    name:'',\n    states:[],\n    alphbet:[],\n    productions:{},\n    initialState:'',\n    terminals:[]\n  }\n  try{\n    const lines = grammar.split(\"\\n\")\n    let [afd_name, definition] = lines[0].split(\"=({\")\n    obj.name = afd_name.trim()\n\n    let [states, rest1] = definition.split('},{')\n    obj.states = states.split(\",\").map(item => item.trim())\n\n    let [alphbet, rest2] = rest1.split('},')\n    obj.alphbet = alphbet.split(',').map(item => item.trim())\n\n    let [prog_name, initial, rest3] = rest2.split(',')\n    obj.initialState = initial.trim()\n\n    let terminals = rest3.slice(1, rest3.length-2).split(',')\n    obj.terminals = terminals.map(item => item.trim())\n\n    if(prog_name === lines[1]){\n      for(let line of lines.slice(2)){\n        if(!line.length){\n          continue\n        }\n        line = line.trim()\n        let [state_symbol, production] = line.slice(1).split(\")=\").map(item => item.trim())\n        let [state, symbol] = state_symbol.split(',').map(item => item.trim())\n\n        if (obj.productions[state]){\n          obj.productions[state][symbol] = production\n        }else{\n          obj.productions[state] = {[symbol]: production}\n        }\n      }\n    }else{\n      throw new Error(\"Nome das produções errado\")\n    }\n\n    return JSON.stringify(obj)\n  }catch(err){\n    throw new Error(`Formato de entrada errado`)\n  }\n}\n\nexport function parseWordTupleList(text:string){\n  try{\n    return text\n          .trim()\n          .split(\"\\n\")\n          .map(tuple => {\n            tuple = tuple.trim()\n            if(tuple.match(/\\(.+,.+\\)/) && !tuple.match(/\\(.+,.*,\\)/)){\n              return tuple\n                      .slice(1, tuple.length-1)\n                      .split(\",\")\n                      .map(word => word.trim())\n            }else {\n              throw new Error(\"entrada errada\")\n            }\n          })\n  }catch(err){\n    swal(\"Erro Formato\", err.message, \"error\")\n  }\n}\n","import React from 'react';\nimport {useState} from 'react';\nimport Editor from './components/Editor'\nimport './App.css';\n\nfunction App() {\n  const grammarState = useState(``)\n\n  return (\n    <main className=\"App\">\n      <Editor\n        grammarState={grammarState}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}