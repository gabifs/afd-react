{"version":3,"sources":["core/Afd/index.ts","components/Editor/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Afd","grammar","grammarType","name","states","alphbet","productions","initialState","currentState","terminals","history","this","JSON","parse","_validatesProductions","word","includes","head","tail","newState","undefined","push","length","_moveTo","run","state","Object","keys","find","prodState","Error","prodStates","Set","values","reduce","combined","prog","prodSymbols","prodSymbol","Editor","props","grammarState","setGrammar","useState","result","wordList","setWordList","InputMessage","className","HistoryMessage","symbol","lastRound","lastState","window","__AFD__","id","type","onChange","event","preventDefault","file","target","files","reader","FileReader","onloadend","readAsText","err","swal","message","value","onClick","map","createAfd","cols","rows","spellCheck","wrap","item","index","key","filter","_word","e","newWord","placeholder","style","marginTop","textAlign","currenteState","simbol","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de779439.chunk.js","sourcesContent":["export default class Afd {\n\n  grammar: string\n  grammarType: string\n  name: string\n  states: Array<string>\n  alphbet: Array<string>\n  productions: any\n  initialState: string\n  currentState: string\n  terminals: Array<string>\n  history: Array<[string, string, string]>\n\n  constructor(grammar:string, grammarType:string = \"json\") {\n    this.grammar = grammar\n    this.grammarType = grammarType\n\n    const {\n      name,\n      states,\n      alphbet,\n      productions,\n      initialState,\n      terminals\n    } = JSON.parse(grammar)\n    // !VALIDAR FORMATO DE ENTRADA\n    // !AFD MINIMIZADO\n\n    this.name = name\n    this.states = states\n    this.alphbet = ['',...alphbet]\n\n    this.productions = this._validatesProductions(productions)\n    this.initialState = initialState\n    this.currentState = initialState\n    this.terminals = terminals\n    this.history = []\n  }\n\n  run(word: string|Array<string> ):boolean{\n    // Verifica palavra vazia\n    if(!word){\n      this.history=[[this.initialState, '', this.initialState]]\n      return this.terminals.includes(this.initialState)\n    }\n\n    const [head, ...tail] = word;\n\n    const newState = this.productions[this.currentState]? this.productions[this.currentState][head] : undefined\n\n    this.history.push([this.currentState, head, newState])\n\n    if(newState){\n      /* novo estado existe */\n\n      if(tail.length !== 0){\n        /* continua a leitura da palavra */\n\n        this._moveTo( newState )\n        return this.run(tail)\n      }else {\n        /* palavra acabou, finaliza execução */\n\n        if(this.terminals.includes(newState)){\n          /* palavra pertence ao alfabeto */\n\n          this._moveTo( this.initialState )\n          return true\n        } else {\n          /* palavra não pertence ao alfabeto */\n\n          this._moveTo( this.initialState )\n          return false\n        }\n      }\n    }else {\n      /* novo estado não existe:\n         - simbolo lido não pertence ao alfabeto\n         - simbolo lido não está ligado ao estado atual\n         - estado atual não pertence ao conjunto de estados */\n      this._moveTo( this.initialState )\n      return false\n    }\n  }\n\n  protected _moveTo(state:string){\n    /* move execução para um novo estado */\n\n    this.currentState = state\n    return this.currentState\n  }\n\n  protected _validatesProductions(productions:object):object {\n\n    if(Object.keys(productions).find(prodState => !this.states.includes(prodState))) {\n      throw new Error(\"Estado da produção indefinido\")\n    }\n\n    const prodStates:Set<string> = new Set(Object\n                                            .values(productions)\n                                            .reduce((combined, prog) => [...combined, ...Object.values(prog)] ,[]))\n\n    if([...prodStates].find(prodState => !this.states.includes(prodState))){\n      throw new Error(\"Estado da produção indefinido\")\n    }\n\n    const prodSymbols:Set<string> = new Set(Object\n                                            .values(productions)\n                                            .reduce((combined, prog) => [...combined, ...Object.keys(prog)] ,[]))\n\n    if([...prodSymbols].find(prodSymbol => !this.alphbet.includes(prodSymbol))){\n      throw new Error(\"Simbolo da produção indefinido\");\n    }\n\n    return productions\n  }\n}\n","import React from 'react'\nimport { useState } from 'react'\nimport swal from 'sweetalert';\nimport './style.css'\n\nimport Afd from '../../core/Afd'\n\ndeclare global {\n  var __AFD__: Afd;\n}\n\ninterface IEditorProps{\n  grammarState: [string, Function]\n}\n\nexport default function Editor(props:IEditorProps) {\n  const [grammar, setGrammar] = props.grammarState\n  const [wordList, setWordList] = useState([\n    {\n      word: '',\n      result: 'disabled',\n      history: []\n    }\n  ])\n\n  function handleNewFile(event:React.ChangeEvent<HTMLInputElement>) {\n    event.preventDefault()\n\n    const file = event.target.files[0];\n\n    if (file) {\n      try {\n        const reader = new FileReader();\n\n        reader.onloadend= () => {\n          setGrammar(reader.result as string)\n        }\n\n        reader.readAsText(file);\n      } catch (err) {\n        swal('Erro', err.message, \"error\")\n      }\n\n    }else {\n      swal(\"Nenhum arquivo\")\n    }\n  }\n\n  function handleGrammarChange (event:React.ChangeEvent<HTMLTextAreaElement>) {\n    event.preventDefault()\n\n    setGrammar(event.target.value)\n  }\n\n  function executeFor(key:number, newWord:string):void{\n    setWordList(wordList.map((item, index)=>{\n      if(window.__AFD__){\n        if(index === key){\n          window.__AFD__.history = []\n          if(window.__AFD__.run(newWord)){\n            return {\n              word: newWord,\n              result: 'success',\n              history: window.__AFD__.history\n            }\n          }else{\n            return {\n              word: newWord,\n              result: 'error',\n              history: window.__AFD__.history\n            }\n          }\n        }else{\n          return item\n        }\n\n      }else{\n        return {\n          word: '',\n          result: 'disabled',\n          history: []\n        }\n      }\n    }))\n  }\n\n  function createAfd(grammar:string){\n    try{\n      window.__AFD__ = new Afd(grammar)\n      setWordList(wordList.map(() => ({\n        word: '',\n        result: window.__AFD__.run('') ? 'success' : 'error',\n        history: window.__AFD__.history\n      })))\n    }catch(err){\n      swal(\"Erro na execução\", err.message, \"error\")\n    }\n  }\n\n  function addInput(){\n    setWordList([\n      ...wordList,\n      {\n        word: '',\n        result: window.__AFD__.run('') ? 'success' : 'error',\n        history: window.__AFD__.history\n      }\n    ])\n  }\n\n  function closeInput(key:number){\n    setWordList(wordList.filter((_word, index) => key !== index))\n  }\n\n  interface IInputMessageProps{\n    result: string\n  }\n\n  const InputMessage = (props:IInputMessageProps) => {\n    switch(props.result){\n      case(\"error\"):\n        return (\n          <span  className=\"nes-badge\">\n            <span className=\"is-error\">REJEITA</span>\n          </span>\n        )\n      case(\"success\"):\n        return (\n          <span className=\"nes-badge\">\n            <span className=\"is-success\">ACEITA</span>\n          </span>\n        )\n      case(\"disabled\"):\n        return (\n          <span className=\"nes-badge\">\n            <span className=\"is-dark\">_</span>\n          </span>\n        )\n    }\n  }\n\n  interface IHistoryMessageProps {\n    lastRound: [string, string, string|undefined]\n  }\n\n  const HistoryMessage = (props:IHistoryMessageProps) => {\n    const symbol = props.lastRound[1]\n    const lastState = props.lastRound[2]\n\n    if(window.__AFD__.alphbet.includes(symbol)){\n      if(lastState){\n        if(window.__AFD__.terminals.includes(lastState)){\n          return (<p className=\"nes-text is-success\">Palavra aceita</p>)\n        }else{\n          return (<p className=\"nes-text is-error\">Estado final não é terminal</p>)\n        }\n      }else{\n        return (<p className=\"nes-text is-error\">Produção indefinida</p>)\n      }\n    }else{\n      return (<p className=\"nes-text is-error\">Simbolo não pertence ao alfabeto</p>)\n    }\n\n  }\n\n  return (\n    <section id=\"editor\">\n      <div className=\"editor__group1 nes-container is-rounded\">\n        <nav className=\"editor__controlsBar\">\n          <div className=\"editor__editorControl\">\n            <label className=\"nes-btn is-primary\">\n              <span>\n                Selecione um arquivo\n              </span>\n              <input\n                type=\"file\"\n                className=\"editor__fileInput is-primary\"\n                onChange={handleNewFile}\n              />\n            </label>\n          </div>\n          <div className=\"editor__editorControl\">\n            <input\n              type=\"button\"\n              value=\"Criar automato\"\n              className=\"nes-btn is-success\"\n              onClick={() => createAfd(grammar)}\n            />\n          </div>\n        </nav>\n        <div className=\"editor__textEditor nes-field\">\n          <textarea\n            name=\"editor\"\n            cols={90}\n            rows={30}\n            value={grammar}\n            onChange={handleGrammarChange}\n            spellCheck=\"false\"\n            className=\"nes-textarea\"\n            wrap=\"soft\"\n          />\n        </div>\n      </div>\n      <div className=\"editor__group2 nes-container is-rounded\">\n        <input\n          type=\"button\"\n          value=\"Add input\"\n          className={`nes-btn is-${window.__AFD__ ? \"warning\" : \"disabled\"}`}\n          onClick={() => addInput()}\n        />\n        {\n          wordList.map((item, index)=>(\n            <div key={index} className=\"editor__wordsInputs nes-container is-rounded\">\n              <div className=\"editor__inputHeader\">\n                <InputMessage result={item.result} />\n                <button\n                  className=\"nes-btn is-error\"\n                  onClick={() => closeInput(index)}\n                >X</button>\n              </div>\n              <input\n                type=\"text\"\n                value={item.word}\n                onChange={(e) => executeFor(index, e.target.value)}\n                className={`nes-input is-${item.result}`}\n                placeholder={window.__AFD__?\"Palavra vazia\":\"Crie um Automato\"}\n              />\n              <details style={{marginTop:'1rem'}}>\n                <summary>Histórico</summary>\n                <div\n                  className=\"nes-container is-rounded is-dark\"\n                  style={{textAlign:\"center\"}}>\n                  {\n                    item.history.map(([currenteState, simbol, newState], index) => (\n                      <p key={index}>\n                        <span className=\"nes-text is-warning\">{`${index+1}) `}</span>\n                        <strong className=\"nes-text is-success\">{currenteState}</strong>\n                        {newState ? (\n                          <>\n                            |<span className=\"nes-text is-primary\">{`(${simbol})`}</span>\n                            |<strong className=\"nes-text is-success\">{newState}</strong>\n                          </>\n                        ) : (\n                          <>\n                            |<span className=\"nes-text is-error\">{`(${simbol})`}</span>\n                          </>\n                        )\n                        }\n                      </p>\n                    ))\n                  }\n                  {\n                    item.history.length ? <HistoryMessage lastRound={item.history[item.history.length -1]}/> : ''\n                  }\n                  </div>\n              </details>\n            </div>\n            )\n          )\n        }\n\n      </div>\n    </section>\n  )\n}\n","import React from 'react';\nimport {useState} from 'react';\nimport Editor from './components/Editor'\nimport './App.css';\n\nfunction App() {\n  const grammarState = useState(``)\n\n  return (\n    <main className=\"App\">\n      <Editor\n        grammarState={grammarState}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}